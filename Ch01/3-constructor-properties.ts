/*] So let's go ahead and dive a little deeper into the constructor and just setting some properties in TypeScript for our object oriented programming. We've already alluded to some of these items but let's recreate our message class here, and we'll give it some similar properties, but now we'll give it a type. So if you hover over this, you'll see that any. Any is typically the worst thing you can have in TypeScript because it defeats the purpose entirely of having TypeScript. Any is just JavaScript. That's all it is. It could be anything, there's no type safety, no type checking, no IntelliSense that's going to make your life easier. So to assign a type here, let's say string, and then we'll have a message and that can also be a string. And then let's say we have a boolean here called isSent because you're going to send messages. We now have three properties that all have a type associated with them. Now in our constructor, let's give it some values of how we're going to pass data. So we'll have a title that gets passed in, and much like our properties, we can give our parameters and our properties a type with the colon, and then we'll give a message a type as well. Now we can pass as much information as we want through this, and we'll update our properties by simply referring to them with the this keyword. So this.title will be equal to the title that we're passing. This.message will be equal to the message that we're sending. And maybe in our class here, we want a message to always never be sent when it's instantiated. So we'll go and set isSent to false. And now we've been able to pass those values and define types and properties not only for our constructor input, which is going to build it when we instantiate with new, like we've done before here. We say new message. And again, we'll pass in hello, and we'll pass in world. And now we have our message.*/